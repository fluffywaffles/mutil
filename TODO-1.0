- Get rid of `extend` - prefer `update_with`
- Make `update*` functions respect property descriptors
- Make `update*` functions work correctly with arrays
- Add `set*` functions for setting (but not overwriting) values
- Optimize (or add a less general alterative to) `mixin`
- Move `define_propert{y,ies}` out of mutton and into index instead
- Make sure all functions are tested
- Make sure mutative alternates are tested
- Remove `not_none` in favor of `not(is_None)`
- Fix the `flip` bug! (update with nonexistent key!)
- `reflex.type` helpers
  - reflex.type.undefined, reflex.type.number, reflex.type.string, etc.
  - reduces the 'reflex.type(types.undefined)` style boilerplate
- `update_or`: update_or(handle_none)(key)(updater)(target)
  - e.g.: update_or(set_value(value)) for supplying a default

update_or_set = key => ({ initial }) => updater => object => {
  return update
    (key)
    (ᐅif(reflex.type(types.undefined))(_ => initial)(updater))
    (object)
}

const count_up = update_or_set('count')({ intitial: 0 })(v => v + 1)
const counter = {}
times(5)(count_up)(counter) // { count: 4 }
