- Add usage examples to readme
- Add iterators specification to documentation (`[ next, value ]`)
- ᐅ.break alias to fold.break
  - Enables short-circuiting pipelines without referencing fold
  - Greatly expands and generalizes the use-case covered by pipelines
  - `ᐅ([ ᐅwhen(_ => skip_this)(_ => ᐅ.break), ... ])`
- Make sure all functions are tested
  - Including mutative alternates
  - Including modules (d, linchpin, ...)
  - Including setters, getters, updaters, fallibles, iterators...
  - Including time-profiling utils
- `update*` improvements/consistency fixes:
  - `update[_value]`: updates `value` (preserves descriptor)
  - `update_descriptor`: updates `descriptor`
  - `update_entry`: apply(update_value)
  - `update_entries`: over(apply(update_value))
  - `update_property`: apply(update_descriptor)
  - `update_properties`: over(apply(update_descriptor))
  - `update_with`: { [key]: value => value, ... } (preserves descriptors)
  - `update_values`: update_with
  - `update_descriptors`: { [key]: descriptor => descriptor, ... }
  - `update_path[_value]`: [ key, ... ] => (value => value)
  - `update_path_descriptor`: [ key, ... ] => (descriptor => descriptor)
- Now the hierarchy is:
  - `set*`: set/create new
  - `update*`: modify existing
    - `_path*`: at the end of a path
      - `_entry`: [ key, value ]
      - `_value`: key => value
      - `_values`: { [key]: value, ... } merge
      - `_property`: [ key, descriptor ]
      - `_descriptor`: key => descriptor
      - `_descriptors`: { [key]: descriptor, ... } merge
- Generalized tree-walking functions
  - proof of need:
    - https://github.com/npm/treeverse
    - that api tho (*shudder*)
  - proposal:
    - order: {breadth,depth}
    - walk.{order}: walk_fn => object => object
    - walk_fn: key => parent => (walk.recur)|(new value for key)
    - walker: like mutative.derive; e.g.: walker(walk => { ... }) => { depth: { ... }, breadth: { ... } }
  - example:
    - walk_leaves: walker(walk => fn => walk(ᐅif(ᐅ([ apply(get), reflex.type.object ]))(walk.recur)(fn)))
    - walk_leaves.{order}(increment)([ 1, 2, [ 3, 4, [ 5 ] ] ])([ 2, 3, [ 4, 5, [ 6 ] ] ])
- Add more mutative alternates (where applicable)

---- Additional updaters ?

upsert = key => ({ default }) => updater => object => {
  return update
    (key)
    (ᐅif(reflex.type(types.undefined))(_ => default)(updater))
    (object)
}

const count_up = upsert('count')({ default: 0 })(v => v + 1)
const counter = {}
times(5)(count_up)(counter) // { count: 4 }

---- fallible.first as fallback ?

upsert_path([ 'a', 'b', 'c' ])({ default: default_value })(updater):

  ƒ.first([
    update_path([ 'a', 'b', 'c' ])(updater),
    set.at_path.value([ 'a', 'b', 'c' ])(default_value),
  ])

---- POST 1.0 ?

- `benchmark` util on top of `time`
  - `benchmark({ samples: N, ... })(() => ...)` etc.
  - call `time` multiple times and `reduce` the results
  - calculate median, mean, standard deviation
  - `profile.summarize({})` prints mean ± stddev, median, best, worst

- Timers?
  - wait  ↔ setTimeout
  - every ↔ setInterval
  - soon  ↔ {setIdleCallback,requestAnimationFrame}

- fallible recovery / fallback fns ?
- fallible.first ALREADY DOES THIS
- `fallible.or`: supersedes `update_or` below with a more general solution
  - `update_or`: update_or(handle_none)(key)(updater)(target)
    - e.g.: update_or(set_value(value)) for supplying a default

- High-effort: follow-up to profiling utilities:
  - automatic CI profiling
  - speed comparison matrix wrt. other utility libraries
    - spoiler alert: @prettybad/util will be slower ^______^...
